%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Box::print() by Christian Lindig
%%BoundingBox: 42 35 552 304
%%Pages: 1
%%EndComments

gsave
34 323 translate
0.640704 -0.640704 scale
% $Id$
% Header for DDD PostScript Box output

% Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
% Written by Christian Lindig <lindig@ips.cs.tu-bs.de>.
% 
% This file is part of DDD.
% 
% DDD is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public
% License as published by the Free Software Foundation; either
% version 3 of the License, or (at your option) any later version.
% 
% DDD is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public
% License along with DDD -- see the file COPYING.
% If not, see <http://www.gnu.org/licenses/>.
% 
% DDD is the data display debugger.
% For details, see the DDD World-Wide-Web page, 
% `http://www.gnu.org/software/ddd/',
% or send a mail to the DDD developers <ddd@gnu.org>.

% Make all definitions local to the ddddict dictionary
/ddddict 25 dict def 

ddddict begin		% make dict active 


% Global variables
/fontSize+ 12 def
/font+ /Courier def  


% Some small utilities
/cm { 28.34646 mul } bind def


% ISOLATIN1* - reencode a font to ISO Latin 1 encoding
%
% newfont table oldfont isolatin1*

/isolatin1* {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def


% Define the ISO Latin 1 encoding of a font
 
/isotable[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma
/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S
/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar
/braceright/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis
/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron/.notdef/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guilsinglleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute
/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis
/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def


% YCORRECT*
% The reference point of a string ist NOT its lower left corner but 
% its baseline.  Therefore, the y coordinate must be corrected.  
% Returns the correction for the current font.
%
% ycorrect* y

/ycorrect* {
	currentfont /FontBBox get
	aload pop pop pop
	currentfont /FontMatrix get dtransform
	exch pop
} def 


% TEXT*
% print out a string and make sure not to require more space than
% specified.
% font xsize ysize xorigin yorigin (string) text*

/text* {

	/string+ exch def		% set up some variables ..
	moveto				% move to (xorigin,yorigin)
	/ysize+ exch def
	/xsize+ exch def
	/thefont+ exch def

	% is the right font already selected ?

	thefont+ font+ ne 
	ysize+ fontSize+ ne
	or {	
		% set up the right font - reencode it	
		
		/Symbol thefont+ eq 
		{
			thefont+ findfont
		}{

			/isofont+ isotable thefont+ isolatin1*	
			/isofont+ findfont
		}ifelse

		[ysize+ 0 0 ysize+ neg 0 0] makefont
		setfont
		
		/font+ thefont+ def
		/fontSize+ ysize+ def
	} if

	% correct current point 

	0 ycorrect* neg rmoveto

	% string too long?  Scale it down ...
	% The actual font is scaled. There is a good chance,
	% that this will not happen too often when the font is not
	% changed during the calls of text*

	xsize+ string+ stringwidth pop div dup dup
	1 lt {
		0 0 1 0 0 6 array astore currentfont exch 
		makefont setfont
		pop
	}{ 
		% string is too short ... scale it up

		1.05 gt {
			0 0 1 0 0 6 array astore currentfont exch 
			makefont setfont	
		}{
			pop

		} ifelse
	} ifelse
	
	string+ show

} bind def

	
% ARROWLINE*
% Draw a line of given width with an arrow at its end
% len gives the height of the triangle forming the head of the arrow
% and angle the angle at its top
%	
% angle len  x1 y1 x2 y2 linewidth arrowline*

/arrowline* {
	setlinewidth			% angle len x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/len+ exch def			% height of triangle

	/alpha+ 
		y2 y1 sub		% define alpha+
		x2 x1 sub
		atan
	def

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def  
	
	newpath				% draw the line
	x1 y1 moveto 
	x2 len+ alpha+ cos mul sub 	% shorten the line to the end  
	y2 len+ alpha+ sin mul sub 	% of the triangle
	lineto
	stroke		

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x2 y2 
	translate			% origin now at x2 y2

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def

% ARROWHEAD*
% draw an arrow head inclined by alpha at (x,y)
%
% angle len alpha x y

/arrowhead* {
	/y exch def
	/x exch def
	/alpha+ exch def
	/len+ exch def			% height of triangle

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x y 
	translate			% origin now at x y

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def


% LINE*
% draw a line of given width from (x1,y1) to (x2,y2)
%
% x1 y1 x2 y2 width line*

/line* {
	setlinewidth	% x1 y1 x2 y2
	newpath
	4 2 roll 	% x2 y2 x1 y1
	moveto		% x2 y2
	lineto		
	stroke
} bind def


% CLEAN*
%
% fill a box given by four points with white colour ..
% x1 y1 x2 y2 x3 y3 x4 y4 clean*

/clean* {
	gsave
	1 setgray
	0 setlinewidth
	newpath
	moveto  lineto  lineto lineto
	closepath
	fill
	grestore
} bind def


% BOX*
% fill a box given by four points
%
% x1 y1 x2 y2 x3 y3 x4 y4 box*

/box* {
	0 setlinewidth
	newpath
	moveto 	lineto 	lineto lineto
	closepath
	fill
} bind def


% ARC*
% draw an ellipse with center (cx,cy), radius dx dy, starting at start
% and ending at end.
%
% start end dx dy cx cy width arc*

/arc* {
	gsave
	setlinewidth
	translate
	newpath
	dup 3 1 roll		% start end dy dx dy
	div 1 scale		% dy dx/dy 1 scale => start end dy
	
	0 exch  0 exch		% start end 0 0 dy 
	5 -2 roll 		% 0 0 dy start end

	dup
	0 eq {			% replace 0 by 360
		pop 
		360
	} if
	arc
	stroke
	grestore
} bind def


% BEGINCOLOR* / ENDCOLOR*
% Draw something using a specific foreground color
%
% red green blue begincolor* SOMETHING endcolor*

/begincolor* {
        currentrgbcolor         % red green blue red' green' blue'
        6 3 roll                % red' green' blue' red green blue
	setrgbcolor             % red' green' blue'
} bind def

/endcolor* {
	setrgbcolor
} bind def


% Set up the right font to the right size

/isofont+ isotable font+ isolatin1* 	% reencode font+
					% and make it the current font
/isofont+ findfont
[fontSize+ 0 0 fontSize+ neg 0 0] makefont
setfont


%%EndProlog
30 10 211 80 244 80 1 arrowline*
/Helvetica-Narrow 60 13 197 78 (*\(\(\).root\)) text*
30 10 285 106 227 182 1 arrowline*
/Helvetica-Narrow 60 13 226 142 (*\(\(\).left\)) text*
30 10 339 106 445 182 1 arrowline*
/Helvetica-Narrow 66 13 359 142 (*\(\(\).right\)) text*
30 10 464 234 416 310 1 arrowline*
/Helvetica-Narrow 60 13 410 270 (*\(\(\).left\)) text*
30 10 509 234 595 310 1 arrowline*
/Helvetica-Narrow 66 13 519 270 (*\(\(\).right\)) text*
30 10 669 362 705 382 1 arrowline*
30 10 404 362 413 414 1 arrowline*
30 10 540 184 675 130 1 arrowline*
30 10 364 70 421 60 1 arrowline*
13 40 212 40 212 121 13 121 clean*
13 40 211 40 211 41 13 41 box* %(13, 40)(198, 1)
13 41 14 41 14 119 13 119 box* %(13, 41)(1, 78)
/Courier 6 13 16 56 (1) text*
/Courier 12 13 22 56 (: ) text*
/Courier-BoldOblique 24 13 34 56 (tree) text*
16 56 208 56 208 57 16 57 box* %(16, 56)(192, 1)
16 59 208 59 208 60 16 60 box* %(16, 59)(192, 1)
16 60 17 60 17 116 16 116 box* %(16, 60)(1, 56)
/Courier 24 13 31 75 (size) text*
/Courier 18 13 73 75 ( = ) text*
/Courier 6 13 91 75 (5) text*
/Courier 42 13 31 88 (compare) text*
/Courier 18 13 73 88 ( = ) text*
/Courier 102 13 91 88 (0x4006f2 <_start>) text*
/Courier 42 13 31 101 (destroy) text*
/Courier 18 13 73 101 ( = ) text*
/Courier 114 13 91 101 (0x400570 <free@plt>) text*
/Courier 24 13 31 114 (root) text*
/Courier 18 13 73 114 ( = ) text*
/Courier 48 13 91 114 (0x603030) text*
207 60 208 60 208 116 207 116 box* %(207, 60)(1, 56)
16 116 208 116 208 117 16 117 box* %(16, 116)(192, 1)
210 41 211 41 211 119 210 119 box* %(210, 41)(1, 78)
13 119 211 119 211 120 13 120 box* %(13, 119)(198, 1)
211 41 212 41 212 120 211 120 box* %(211, 41)(1, 79)
14 120 212 120 212 121 14 121 box* %(14, 120)(198, 1)
564 310 685 310 685 362 564 362 clean*
564 310 684 310 684 311 564 311 box* %(564, 310)(120, 1)
564 311 565 311 565 360 564 360 box* %(564, 311)(1, 49)
567 313 681 313 681 314 567 314 box* %(567, 313)(114, 1)
567 314 568 314 568 357 567 357 box* %(567, 314)(1, 43)
/Courier 24 13 582 329 (data) text*
/Courier 18 13 612 329 ( = ) text*
/Courier 48 13 630 329 (0x603110) text*
/Courier 24 13 582 342 (left) text*
/Courier 18 13 612 342 ( = ) text*
/Courier 18 13 630 342 (0x0) text*
/Courier 30 13 582 355 (right) text*
/Courier 18 13 612 355 ( = ) text*
/Courier 18 13 630 355 (0x0) text*
680 314 681 314 681 357 680 357 box* %(680, 314)(1, 43)
567 357 681 357 681 358 567 358 box* %(567, 357)(114, 1)
683 311 684 311 684 360 683 360 box* %(683, 311)(1, 49)
564 360 684 360 684 361 564 361 box* %(564, 360)(120, 1)
684 311 685 311 685 361 684 361 box* %(684, 311)(1, 50)
565 361 685 361 685 362 565 362 box* %(565, 361)(120, 1)
664 382 809 382 809 418 664 418 clean*
664 382 808 382 808 383 664 383 box* %(664, 382)(144, 1)
664 383 665 383 665 416 664 416 box* %(664, 383)(1, 33)
/Courier 6 13 667 398 (9) text*
/Courier 12 13 673 398 (: ) text*
/Courier-BoldOblique 120 13 685 398 (\(char*\)\(t...t->data\)) text*
667 398 805 398 805 399 667 399 box* %(667, 398)(138, 1)
/Courier 72 13 667 414 (0x603110 \"5\") text*
807 383 808 383 808 416 807 416 box* %(807, 383)(1, 33)
664 416 808 416 808 417 664 417 box* %(664, 416)(144, 1)
808 383 809 383 809 417 808 417 box* %(808, 383)(1, 34)
665 417 809 417 809 418 665 418 box* %(665, 417)(144, 1)
340 310 461 310 461 362 340 362 clean*
340 310 460 310 460 311 340 311 box* %(340, 310)(120, 1)
340 311 341 311 341 360 340 360 box* %(340, 311)(1, 49)
343 313 457 313 457 314 343 314 box* %(343, 313)(114, 1)
343 314 344 314 344 357 343 357 box* %(343, 314)(1, 43)
/Courier 24 13 358 329 (data) text*
/Courier 18 13 388 329 ( = ) text*
/Courier 48 13 406 329 (0x6030d0) text*
/Courier 24 13 358 342 (left) text*
/Courier 18 13 388 342 ( = ) text*
/Courier 18 13 406 342 (0x0) text*
/Courier 30 13 358 355 (right) text*
/Courier 18 13 388 355 ( = ) text*
/Courier 18 13 406 355 (0x0) text*
456 314 457 314 457 357 456 357 box* %(456, 314)(1, 43)
343 357 457 357 457 358 343 358 box* %(343, 357)(114, 1)
459 311 460 311 460 360 459 360 box* %(459, 311)(1, 49)
340 360 460 360 460 361 340 361 box* %(340, 360)(120, 1)
460 311 461 311 461 361 460 361 box* %(460, 311)(1, 50)
341 361 461 361 461 362 341 362 box* %(341, 361)(120, 1)
341 414 492 414 492 450 341 450 clean*
341 414 491 414 491 415 341 415 box* %(341, 414)(150, 1)
341 415 342 415 342 448 341 448 box* %(341, 415)(1, 33)
/Courier 12 13 344 430 (11) text*
/Courier 12 13 356 430 (: ) text*
/Courier-BoldOblique 120 13 368 430 (\(char*\)\(t...t->data\)) text*
344 430 488 430 488 431 344 431 box* %(344, 430)(144, 1)
/Courier 72 13 344 446 (0x6030d0 \"4\") text*
490 415 491 415 491 448 490 448 box* %(490, 415)(1, 33)
341 448 491 448 491 449 341 449 box* %(341, 448)(150, 1)
491 415 492 415 492 449 491 449 box* %(491, 415)(1, 34)
342 449 492 449 492 450 342 450 box* %(342, 449)(150, 1)
420 182 541 182 541 234 420 234 clean*
420 182 540 182 540 183 420 183 box* %(420, 182)(120, 1)
420 183 421 183 421 232 420 232 box* %(420, 183)(1, 49)
423 185 537 185 537 186 423 186 box* %(423, 185)(114, 1)
423 186 424 186 424 229 423 229 box* %(423, 186)(1, 43)
/Courier 24 13 438 201 (data) text*
/Courier 18 13 468 201 ( = ) text*
/Courier 48 13 486 201 (0x603090) text*
/Courier 24 13 438 214 (left) text*
/Courier 18 13 468 214 ( = ) text*
/Courier 48 13 486 214 (0x6030f0) text*
/Courier 30 13 438 227 (right) text*
/Courier 18 13 468 227 ( = ) text*
/Courier 48 13 486 227 (0x603130) text*
536 186 537 186 537 229 536 229 box* %(536, 186)(1, 43)
423 229 537 229 537 230 423 230 box* %(423, 229)(114, 1)
539 183 540 183 540 232 539 232 box* %(539, 183)(1, 49)
420 232 540 232 540 233 420 233 box* %(420, 232)(120, 1)
540 183 541 183 541 233 540 233 box* %(540, 183)(1, 50)
421 233 541 233 541 234 421 234 box* %(421, 233)(120, 1)
645 94 796 94 796 130 645 130 clean*
645 94 795 94 795 95 645 95 box* %(645, 94)(150, 1)
645 95 646 95 646 128 645 128 box* %(645, 95)(1, 33)
/Courier 12 13 648 110 (13) text*
/Courier 12 13 660 110 (: ) text*
/Courier-BoldOblique 120 13 672 110 (\(char*\)\(t...t->data\)) text*
648 110 792 110 792 111 648 111 box* %(648, 110)(144, 1)
/Courier 72 13 648 126 (0x603090 \"3\") text*
794 95 795 95 795 128 794 128 box* %(794, 95)(1, 33)
645 128 795 128 795 129 645 129 box* %(645, 128)(150, 1)
795 95 796 95 796 129 795 129 box* %(795, 95)(1, 34)
646 129 796 129 796 130 646 130 box* %(646, 129)(150, 1)
148 182 269 182 269 234 148 234 clean*
148 182 268 182 268 183 148 183 box* %(148, 182)(120, 1)
148 183 149 183 149 232 148 232 box* %(148, 183)(1, 49)
151 185 265 185 265 186 151 186 box* %(151, 185)(114, 1)
151 186 152 186 152 229 151 229 box* %(151, 186)(1, 43)
/Courier 24 13 166 201 (data) text*
/Courier 18 13 196 201 ( = ) text*
/Courier 48 13 214 201 (0x603050) text*
/Courier 24 13 166 214 (left) text*
/Courier 18 13 196 214 ( = ) text*
/Courier 18 13 214 214 (0x0) text*
/Courier 30 13 166 227 (right) text*
/Courier 18 13 196 227 ( = ) text*
/Courier 18 13 214 227 (0x0) text*
264 186 265 186 265 229 264 229 box* %(264, 186)(1, 43)
151 229 265 229 265 230 151 230 box* %(151, 229)(114, 1)
267 183 268 183 268 232 267 232 box* %(267, 183)(1, 49)
148 232 268 232 268 233 148 233 box* %(148, 232)(120, 1)
268 183 269 183 269 233 268 233 box* %(268, 183)(1, 50)
149 233 269 233 269 234 149 234 box* %(149, 233)(120, 1)
244 54 365 54 365 106 244 106 clean*
244 54 364 54 364 55 244 55 box* %(244, 54)(120, 1)
244 55 245 55 245 104 244 104 box* %(244, 55)(1, 49)
247 57 361 57 361 58 247 58 box* %(247, 57)(114, 1)
247 58 248 58 248 101 247 101 box* %(247, 58)(1, 43)
/Courier 24 13 262 73 (data) text*
/Courier 18 13 292 73 ( = ) text*
/Courier 48 13 310 73 (0x603010) text*
/Courier 24 13 262 86 (left) text*
/Courier 18 13 292 86 ( = ) text*
/Courier 48 13 310 86 (0x603070) text*
/Courier 30 13 262 99 (right) text*
/Courier 18 13 292 99 ( = ) text*
/Courier 48 13 310 99 (0x6030b0) text*
360 58 361 58 361 101 360 101 box* %(360, 58)(1, 43)
247 101 361 101 361 102 247 102 box* %(247, 101)(114, 1)
363 55 364 55 364 104 363 104 box* %(363, 55)(1, 49)
244 104 364 104 364 105 244 105 box* %(244, 104)(120, 1)
364 55 365 55 365 105 364 105 box* %(364, 55)(1, 50)
245 105 365 105 365 106 245 106 box* %(245, 105)(120, 1)
421 30 572 30 572 66 421 66 clean*
421 30 571 30 571 31 421 31 box* %(421, 30)(150, 1)
421 31 422 31 422 64 421 64 box* %(421, 31)(1, 33)
/Courier 12 13 424 46 (15) text*
/Courier 12 13 436 46 (: ) text*
/Courier-BoldOblique 120 13 448 46 (\(char*\)\(t...t->data\)) text*
424 46 568 46 568 47 424 47 box* %(424, 46)(144, 1)
/Courier 72 13 424 62 (0x603010 \"1\") text*
570 31 571 31 571 64 570 64 box* %(570, 31)(1, 33)
421 64 571 64 571 65 421 65 box* %(421, 64)(150, 1)
571 31 572 31 572 65 571 65 box* %(571, 31)(1, 34)
422 65 572 65 572 66 422 66 box* %(422, 65)(150, 1)
%%Trailer

% $Id$
% Trailer for DDD PostScript Box output

grestore
showpage
end		% of ddddict 
